name: Weather App CI/CD

on:
  push:
    branches:
      - main
      - staging
      - dev
      - feature/**  # allows feature branches like feature/ci-cd-enhancements
  pull_request:
    branches:
      - main
      - staging
      - dev

jobs:
  ci:
    name: Run CI (Lint, Test, Audit)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node-version: 20.x  # LTS
          - os: ubuntu-latest
            node-version: 21.x  # Current

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run lint (includes security plugin)
        run: npm run lint

      - name: Run tests with coverage
        run: npm test -- --ci --reporters=default --coverage

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Upload coverage to Coveralls
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}


  # Production Job Deployment to GitHub Pages wih Docker Build to DockerHub and GCR
  #-----------------------------------------------------------------------------
  production-deploy:
    name: Deploy to GitHub Pages (Production env)
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # only for main
    environment:
      name: production
      url: https://${{ github.repository_owner }}.github.io/weather-runner  # adjust if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build project
        run: npm run build

      - name: Deploy to GitHub Pages
        run: |
          npx gh-pages -d public -r https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build & Push Docker Image
    needs: production-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Cache Docker layers efficiently using GitHub Actions' built-in cache backend for Docker layers
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            ghcr.io/${{ github.repository_owner }}/weather-app:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max


  # Staging Job Deployment to Firebase Hosting
  #-----------------------------------------------------------------------------
  staging-deploy:
    name: Deploy to Firebase Hosting (Staging)
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://weather-runner-70a64.web.app/  # only for staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'  # Updated to Node.js 20 (required for Firebase CLI v14+)

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: weather-runner-70a64
          channelId: live  # optional: can use preview channels too (staging-preview)
         

  #-----------------------------------------------------------------------------
  # Dev Job Alternate Deployment to Cloud Run (with Cloud Build, DockerHub, Arifact Registry, Pulumi & Terraform)
  #-----------------------------------------------------------------------------
  # Cloud Run Dev Deployment using DockerHub (SA: weather-app-sa - weather-app project)
  #-----------------------------------------------------------     
  # dev-deploy:
  #   name: Deploy to Google Cloud Run (Dev)
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment:
  #     name: dev
  #     url: ${{ steps.deploy.outputs.url }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: docker.io
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
  #           docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}
            
  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Deploy to Cloud Run (Dev)
  #       id: deploy
  #       run: |
  #         gcloud run deploy weather-app-dev \
  #           --image docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest \
  #           --project ${{ secrets.GCP_PROJECT_ID }} \
  #           --region us-central1 \
  #           --platform managed \
  #           --allow-unauthenticated \
  #           --update-env-vars NODE_ENV=dev \
  #           --timeout 5m \
  #           --port 8080

  #     - name: Output Cloud Run URL
  #       run: |
  #         SERVICE_URL=$(gcloud run services describe weather-app-dev --region us-central1 --format 'value(status.url)')
  #         echo "Deployed to: $SERVICE_URL"
      


  # # Cloud Run Dev Deployment with Artifact Registry (SA: weather-app-sa - weather-app project)
  # #-----------------------------------------------------------
  # dev-deploy:
  #   name: Deploy to Google Cloud Run (Dev)
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment:
  #     name: dev
  #     url: ${{ steps.deploy.outputs.url }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Configure Docker to use Artifact Registry
  #       run: gcloud auth configure-docker us-central1-docker.pkg.dev

  #     - name: Build Docker image
  #       run: |
  #         docker build \
  #           -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest \
  #           -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:${{ github.sha }} \
  #           .

  #     - name: Push Docker images to Artifact Registry
  #       run: |
  #         docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest
  #         docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:${{ github.sha }}

  #     - name: Wait for propagation
  #       run: sleep 60  # 1 minutes for propagation

  #     - name: Deploy to Cloud Run (Dev)
  #       id: deploy
  #       run: |
  #         gcloud run deploy weather-app-dev \
  #           --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest \
  #           --region us-central1 \
  #           --platform managed \
  #           --allow-unauthenticated \
  #           --update-env-vars NODE_ENV=dev \
  #           --timeout 5m \
  #           --port 8080

  #     - name: Output Cloud Run URL
  #       run: |
  #         SERVICE_URL=$(gcloud run services describe weather-app-dev --region us-central1 --format 'value(status.url)')
  #         echo "Deployed to: $SERVICE_URL"

  #     - name: Notify Slack of Dev Deploy
  #       if: success()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
  #         SLACK_MESSAGE: |
  #           ✅ *Dev Deployment Successful*
  #           Repo: `${{ github.repository }}`
  #           Branch: `${{ github.ref_name }}`
  #           Commit: `${{ github.sha }}`
  #         SLACK_COLOR: good
  #     - name: Notify Slack of Dev Deploy Failure
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
  #         SLACK_MESSAGE: |
  #           ❌ *Dev Deployment Failed*
  #           Repo: `${{ github.repository }}`
  #           Branch: `${{ github.ref_name }}`
  #           Commit: `${{ github.sha }}`
  #         SLACK_COLOR: danger



# # # Cloud Run (Dev Deployment) with Pulumi Infra Provisioning (SA: pulumi-dev-deployer - weather-app2 project)
# # #-----------------------------------------------------------------        
#   infra-deploy:
#     name: Provision GCP Infra via Pulumi (Dev)
#     needs: ci
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/dev'
#     environment:
#       name: dev

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Pulumi
#         uses: pulumi/actions@v4
#         with:
#           pulumi-version: 3.x

#       - name: Authenticate as admin
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: '${{ secrets.GCP_ADMIN_SA_KEY }}'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'

#       - name: Set up virtual environment and install Python dependencies
#         working-directory: ./pulumi
#         run: |
#           python -m venv venv
#           source venv/bin/activate
#           pip install -r requirements.txt

#       - name: Set up Pulumi stack
#         working-directory: ./pulumi
#         run: |
#           source venv/bin/activate
#           pulumi login
#           pulumi stack select dev || pulumi stack init dev --non-interactive
#         env:
#           PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

#       # Fixed config step - moved BEFORE preview and using env vars
#       - name: Set Pulumi config
#         working-directory: ./pulumi
#         run: |
#           source venv/bin/activate
#           pulumi config set project "$PROJECT_ID"
#           pulumi config set region "$REGION"
#           pulumi config set --secret gcpServiceAccountKey "$SERVICE_ACCOUNT_KEY"
#         env:
#           PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#           REGION: ${{ secrets.GCP_REGION }}  # Fix typo: REGION not REGION
#           SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_ADMIN_SA_KEY }}

#       - name: Run Pulumi preview
#         working-directory: ./pulumi
#         run: |
#           source venv/bin/activate
#           pulumi preview -s dev
#         env:
#           PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
   

#   dev-deploy:
#     name: Deploy to Google Cloud Run (Dev)
#     needs: [ci, infra-deploy]
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/dev'
#     environment:
#       name: dev
#       url: ${{ steps.deploy.outputs.url }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           cache: 'npm'

#       - name: Install dependencies
#         run: npm ci

#       - name: Build project
#         run: npm run build

#       - name: Verify service account
#         run: |
#           echo "Service account email:"
#           echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' | jq -r .client_email
#           echo "Should be: pulumi-dev-deployer@weather-app2-460914.iam.gserviceaccount.com"

#       # Use admin credentials for Docker operations
#       - name: Authenticate to Google Cloud (Admin)
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}
#           create_credentials_file: true
#           export_environment_variables: true

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2

#       - name: Wait for IAM propagation
#         run: sleep 60  # 5 minutes for propagation

#       # - name: Authenticate to Google Cloud for Docker
#       #   id: auth_docker # Add an ID for this step to reference its outputs
#       #   uses: google-github-actions/auth@v2
#       #   with:
#       #     credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
#       #     project_id: ${{ secrets.GCP_PROJECT_ID }}
#       #     token_format: 'access_token' # Ensure access_token is outputted

#       # - name: Login to Artifact Registry
#       #   uses: docker/login-action@v3
#       #   with:
#       #     registry: ${{ secrets.GCP_REGION }}-docker.pkg.dev
#       #     username: oauth2accesstoken
#       #     password: ${{ steps.auth_docker.outputs.access_token }} # Reference the access_token from the previous step

#       - name: Authenticate Docker with access token
#         run: |
#           echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' > $HOME/gcp-key.json
#           gcloud auth activate-service-account --key-file=$HOME/gcp-key.json
#           gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#           gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ secrets.GCP_REGION }}-docker.pkg.dev

#       # THIS IS THE CRITICAL DEBUGGING STEP FOR YOUR CURRENT PROBLEM
#       - name: Debug Docker Image Tag
#         run: |
#           IMAGE_FULL_TAG="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }}"
#           echo "Attempting to build and push image with tag: $IMAGE_FULL_TAG"
#           echo "Region: ${{ secrets.GCP_REGION }}"
#           echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
#           echo "Repo Name: my-nodejs-app-repo"
#           echo "Image Name: nodejs-app"

#       - name: Build Docker image
#         run: |
#           docker build \
#             -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:latest \
#             -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }} \
#             .

#       - name: Test Artifact Registry permissions
#         run: |
#           gcloud artifacts repositories get-iam-policy my-nodejs-app-repo \
#             --location=us-central1 --project=${{ secrets.GCP_PROJECT_ID }}

#       - name: Push Docker images (with admin fallback)
#         run: |
#           docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }} || {
#             echo "Falling back to admin credentials..."
#             docker logout https://${{ secrets.GCP_REGION }}-docker.pkg.dev
#             echo '${{ secrets.GCP_ADMIN_SA_KEY }}' | docker login -u _json_key --password-stdin https://${{ secrets.GCP_REGION }}-docker.pkg.dev
#             docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }}
#           }

#       - name: Deploy to Cloud Run
#         id: deploy
#         run: |
#           gcloud run deploy nodejs-cloudrun-service \
#             --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:latest \
#             --region ${{ secrets.GCP_REGION }} \
#             --platform managed \
#             --allow-unauthenticated \
#             --update-env-vars NODE_ENV=dev \
#             --timeout 5m \
#             --port 8080

#       - name: Output Cloud Run URL
#         run: |
#           SERVICE_URL=$(gcloud run services describe nodejs-cloudrun-service --region ${{ secrets.GCP_REGION }} --format 'value(status.url)')
#           echo "Deployed to: $SERVICE_URL"
#           echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT


#       # Slack Notifications
#       - name: Notify Slack of Dev Deploy
#         if: success()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
#           SLACK_MESSAGE: |
#             ✅ *Dev Deployment Successful*
#             Repo: `${{ github.repository }}`
#             Branch: `${{ github.ref_name }}`
#             Commit: `${{ github.sha }}`
#           SLACK_COLOR: good

#       - name: Notify Slack of Dev Deploy Failure
#         if: failure()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
#           SLACK_MESSAGE: |
#             ❌ *Dev Deployment Failed*
#             Repo: `${{ github.repository }}`
#             Branch: `${{ github.ref_name }}`
#             Commit: `${{ github.sha }}`
#           SLACK_COLOR: danger



# # Cloud Run (Dev Deployment) with Terraform Infra Deploy (Single Job -  Inefficient)
# #-----------------------------------------------------------------  
#   dev-deploy:
#     name: Deploy to Google Cloud Run (Dev)
#     needs: [ci]
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/dev'
#     environment:
#       name: dev
#       url: ${{ steps.tf-output.outputs.service_url }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#           cache: 'npm'

#       - name: Install dependencies
#         run: npm ci

#       - name: Build project
#         run: npm run build

#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2

#       # 1. CREATE STATE BUCKET WITH PROPER PERMISSIONS
#       - name: Create Terraform State Bucket
#         run: |
#           BUCKET_NAME="weather-app-tfstate-v2"
#           # Create bucket if not exists
#           if ! gsutil ls gs://$BUCKET_NAME; then
#             gsutil mb -p ${{ secrets.GCP_PROJECT_ID }} -l us-central1 gs://$BUCKET_NAME
#           fi
#           # Grant permissions to service account
#           gsutil iam ch serviceAccount:${{ secrets.GCP_SA_EMAIL }}:roles/storage.admin gs://$BUCKET_NAME

#       # 2. INIT TERRAFORM WITH EXPLICIT BACKEND CONFIG
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.7.0

#       - name: Terraform Init
#         run: |
#           terraform init \
#             -backend-config="bucket=weather-app-tfstate-v2" \
#             -backend-config="prefix=dev"
#         working-directory: ./terraform/dev
#         env:
#           GOOGLE_CREDENTIALS: '${{ secrets.GCP_DEV_SA_KEY }}'

#     # ... rest of your steps unchanged ...

#       - name: Create Artifact Registry
#         run: |
#           terraform apply -auto-approve \
#             -target=google_artifact_registry_repository.weather_appv2 \
#             -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
#             -var="region=us-central1"
#         working-directory: ./terraform/dev

#       # NOW configure Docker and push images
#       - name: Configure Docker
#         run: gcloud auth configure-docker us-central1-docker.pkg.dev

#       - name: Build Docker image
#         run: |
#           docker build \
#             -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repov2/weather-appv2:${{ github.ref_name }}-${{ github.sha }} \
#             -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repov2/weather-appv2:${{ github.ref_name }}-latest \
#             .

#       - name: Push Docker images
#         run: |
#           docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repov2/weather-appv2:${{ github.ref_name }}-${{ github.sha }}
#           docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repov2/weather-appv2:${{ github.ref_name }}-latest

#       # FINALLY: Deploy Cloud Run service
#       - name: Deploy to Cloud Run
#         id: tf-apply
#         run: |
#           terraform apply -auto-approve \
#             -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
#             -var="region=us-central1" \
#             -var="image_tag=${{ github.ref_name }}-${{ github.sha }}"
#         working-directory: ./terraform/dev

#       - name: Extract Service URL
#         id: tf-output
#         run: |
#           url=$(terraform output -raw service_url)
#           echo "service_url=$url" >> $GITHUB_OUTPUT
#         working-directory: ./terraform/dev


#       # Slack notifications
#       - name: Notify Slack of Dev Deploy
#         if: success()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
#           SLACK_MESSAGE: |
#             ✅ *Dev Deployment Successful (Terraform)*
#             Repo: `${{ github.repository }}`
#             Branch: `${{ github.ref_name }}`
#             Commit: `${{ github.sha }}`
#             URL: ${{ steps.tf-output.outputs.service_url }}
#           SLACK_COLOR: good

#       - name: Notify Slack of Dev Deploy Failure
#         if: failure()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
#           SLACK_MESSAGE: |
#             ❌ *Dev Deployment Failed (Terraform)*
#             Repo: `${{ github.repository }}`
#             Branch: `${{ github.ref_name }}`
#             Commit: `${{ github.sha }}`
#           SLACK_COLOR: danger


# # Cloud Run (Dev Deployment) with Terraform Infra Provisiing (infra-deploy and dev-deploy split)
# #-----------------------------------------------------------------  
  infra-deploy:
    name: Setup Terraform Infrastructure
    needs: ci
    runs-on: ubuntu-latest
    environment:
      name: dev
    outputs:
      tf_bucket: ${{ steps.tf-bucket.outputs.bucket_name }}
      repo_name: ${{ steps.tf-infra.outputs.artifact_repo }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Create Terraform State Bucket
      - name: Create Terraform State Bucket
        id: tf-bucket
        run: |
          BUCKET_NAME="weather-app-tfstate-v2-${{ github.run_id }}"
          gsutil mb -p ${{ secrets.GCP_PROJECT_ID }} -l us-central1 gs://$BUCKET_NAME
          gsutil iam ch serviceAccount:${{ secrets.GCP_SA_EMAIL }}:roles/storage.admin gs://$BUCKET_NAME
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Init Terraform for Artifact Registry
        run: |
          terraform init \
            -backend-config="bucket=${{ steps.tf-bucket.outputs.bucket_name }}" \
            -backend-config="prefix=artifact-registry"
        working-directory: ./terraform/dev/artifact-registry

      #terraform validate and terraform plan not strictly required, but it's best practice for visibility and debugging
      - name: Validate Terraform
        run: terraform validate
        working-directory: ./terraform/dev/artifact-registry

      - name: Terraform Plan (for Artifact Registry)
        run: |
          terraform plan \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="region=us-central1"
        working-directory: ./terraform/dev/artifact-registry

      # - name: Import existing Artifact Registry (idempotent)
      #   run: |
      #     terraform import google_artifact_registry_repository.weather_appv2 \
      #       projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/repositories/weather-app-repov2 || true
      #   working-directory: ./terraform/dev/artifact-registry

      - name: Apply Artifact Registry Only
        id: tf-infra
        run: |
          terraform apply -auto-approve -input=false -lock-timeout=300s \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=us-central1"
          repo_name=$(terraform output -raw artifact_repo_name)
          echo "artifact_repo=$repo_name" >> $GITHUB_OUTPUT
        working-directory: ./terraform/dev/artifact-registry

  dev-deploy:
    name: Deploy to Google Cloud Run (Dev)
    needs: [ci, infra-deploy]
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: ${{ steps.tf-output.outputs.service_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet


      # Build and push using repo name from infra job
      - name: Build Docker image
        run: |
          docker build \
            -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.infra-deploy.outputs.repo_name }}/weather-appv2:${{ github.ref_name }}-${{ github.sha }} \
            -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.infra-deploy.outputs.repo_name }}/weather-appv2:${{ github.ref_name }}-latest \
            .

      - name: Push Docker images
        run: |
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.infra-deploy.outputs.repo_name }}/weather-appv2:${{ github.ref_name }}-${{ github.sha }}
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ needs.infra-deploy.outputs.repo_name }}/weather-appv2:${{ github.ref_name }}-latest

      # Initialize Terraform with same state bucket
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.infra-deploy.outputs.tf_bucket }}" \
            -backend-config="prefix=app"
        working-directory: ./terraform/dev/app
        env:
          GOOGLE_CREDENTIALS: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'

      #terraform validate and terraform plan not strictly required, but it's best practice for visibility and debugging
      - name: Validate Terraform (App)
        run: terraform validate
        working-directory: ./terraform/dev/app

      - name: Terraform Plan (App)
        run: |
          terraform plan \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="region=us-central1" \
          -var="image_tag=${{ github.ref_name }}-${{ github.sha }}" \
          -var="artifact_repo=${{ needs.infra-deploy.outputs.repo_name }}"
        working-directory: ./terraform/dev/app

      # Deploy Cloud Run service
      - name: Deploy to Cloud Run
        id: tf-apply
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=us-central1" \
            -var="image_tag=${{ github.ref_name }}-${{ github.sha }}" \
            -var="artifact_repo=${{ needs.infra-deploy.outputs.repo_name }}"
        working-directory: ./terraform/dev/app

      - name: Extract Service URL
        id: tf-output
        run: |
          url=$(terraform output -raw service_url)
          echo "service_url=$url" >> $GITHUB_OUTPUT
        working-directory: ./terraform/dev/app

      # ... (Slack notifications remain the same) ...

      - name: Notify Slack of Dev Deploy
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
          SLACK_MESSAGE: |
            ✅ *Dev Deployment Successful (Terraform)*
            Repo: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            URL: ${{ steps.tf-output.outputs.service_url }}
          SLACK_COLOR: good

      - name: Notify Slack of Dev Deploy Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
          SLACK_MESSAGE: |
            ❌ *Dev Deployment Failed (Terraform)*
            Repo: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
          SLACK_COLOR: danger

  
