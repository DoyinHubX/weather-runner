name: Weather App CI/CD

on:
  push:
    branches:
      - main
      - staging
      - dev
      - feature/**  # allows feature branches like feature/ci-cd-enhancements
  pull_request:
    branches:
      - main
      - staging
      - dev

jobs:
  ci:
    name: Run CI (Lint, Test, Audit)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node-version: 20.x  # LTS
          - os: ubuntu-latest
            node-version: 21.x  # Current

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run lint (includes security plugin)
        run: npm run lint

      - name: Run tests with coverage
        run: npm test -- --ci --reporters=default --coverage

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Upload coverage to Coveralls
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  production-deploy:
    name: Deploy to GitHub Pages (Production env)
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # only for main
    environment:
      name: production
      url: https://${{ github.repository_owner }}.github.io/weather-runner  # adjust if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build project
        run: npm run build

      - name: Deploy to GitHub Pages
        run: |
          npx gh-pages -d public -r https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  staging-deploy:
    name: Deploy to Firebase Hosting (Staging)
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://weather-runner-70a64.web.app/  # only for staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'  # Updated to Node.js 20 (required for Firebase CLI v14+)

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: weather-runner-70a64
          channelId: live  # optional: can use preview channels too (staging-preview)
  
  dev-deploy:
      name: Deploy to Google Cloud Run (Dev)
      needs: ci
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/dev'
      environment:
        name: dev
        url: ${{ steps.deploy.outputs.url }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20.x'
            cache: 'npm'

        - name: Install dependencies
          run: npm ci

        - name: Build project
          run: npm run build

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            registry: docker.io
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: |
              docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
              docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}
              
        - name: Deploy to Cloud Run (Dev)
          id: deploy
          run: |
            gcloud run deploy weather-app-dev \
              --image docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest \
              --project ${{ secrets.GCP_PROJECT_ID }} \  
              --region us-central1 \
              --platform managed \
              --allow-unauthenticated \
              --update-env-vars NODE_ENV=dev \
              --timeout 5m \
              --port 8080

        - name: Output Cloud Run URL
          run: |
            SERVICE_URL=$(gcloud run services describe weather-app-dev --region us-central1 --format 'value(status.url)')
            echo "Deployed to: $SERVICE_URL"
      
  docker:
    name: Build & Push Docker Image
    needs: production-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Cache Docker layers efficiently using GitHub Actions' built-in cache backend for Docker layers
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            ghcr.io/${{ github.repository_owner }}/weather-app:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
