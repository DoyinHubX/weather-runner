name: Weather App CI/CD

on:
  push:
    branches:
      - main
      - staging
      - dev
      - feature/**  # allows feature branches like feature/ci-cd-enhancements
  pull_request:
    branches:
      - main
      - staging
      - dev

jobs:
  ci:
    name: Run CI (Lint, Test, Audit)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            node-version: 20.x  # LTS
          - os: ubuntu-latest
            node-version: 21.x  # Current

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run lint (includes security plugin)
        run: npm run lint

      - name: Run tests with coverage
        run: npm test -- --ci --reporters=default --coverage

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Upload coverage to Coveralls
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  production-deploy:
    name: Deploy to GitHub Pages (Production env)
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # only for main
    environment:
      name: production
      url: https://${{ github.repository_owner }}.github.io/weather-runner  # adjust if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build project
        run: npm run build

      - name: Deploy to GitHub Pages
        run: |
          npx gh-pages -d public -r https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  staging-deploy:
    name: Deploy to Firebase Hosting (Staging)
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://weather-runner-70a64.web.app/  # only for staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'  # Updated to Node.js 20 (required for Firebase CLI v14+)

      # Allows GitHub Actions caching
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: weather-runner-70a64
          channelId: live  # optional: can use preview channels too (staging-preview)
         

  # DockerHub
  #-----------------------------------------------------------     
  # dev-deploy:
  #   name: Deploy to Google Cloud Run (Dev)
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment:
  #     name: dev
  #     url: ${{ steps.deploy.outputs.url }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: docker.io
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
  #           docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:${{ github.sha }}
            
  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Deploy to Cloud Run (Dev)
  #       id: deploy
  #       run: |
  #         gcloud run deploy weather-app-dev \
  #           --image docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest \
  #           --project ${{ secrets.GCP_PROJECT_ID }} \
  #           --region us-central1 \
  #           --platform managed \
  #           --allow-unauthenticated \
  #           --update-env-vars NODE_ENV=dev \
  #           --timeout 5m \
  #           --port 8080

  #     - name: Output Cloud Run URL
  #       run: |
  #         SERVICE_URL=$(gcloud run services describe weather-app-dev --region us-central1 --format 'value(status.url)')
  #         echo "Deployed to: $SERVICE_URL"
      

  # # Artifact Registry
  # #-----------------------------------------------------------
  # dev-deploy:
  #   name: Deploy to Google Cloud Run (Dev)
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment:
  #     name: dev
  #     url: ${{ steps.deploy.outputs.url }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Configure Docker to use Artifact Registry
  #       run: gcloud auth configure-docker us-central1-docker.pkg.dev

  #     - name: Build Docker image
  #       run: |
  #         docker build \
  #           -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest \
  #           -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:${{ github.sha }} \
  #           .

  #     - name: Push Docker images to Artifact Registry
  #       run: |
  #         docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest
  #         docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:${{ github.sha }}

  #     - name: Deploy to Cloud Run (Dev)
  #       id: deploy
  #       run: |
  #         gcloud run deploy weather-app-dev \
  #           --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/weather-app-repo/weather-app:latest \
  #           --region us-central1 \
  #           --platform managed \
  #           --allow-unauthenticated \
  #           --update-env-vars NODE_ENV=dev \
  #           --timeout 5m \
  #           --port 8080

  #     - name: Output Cloud Run URL
  #       run: |
  #         SERVICE_URL=$(gcloud run services describe weather-app-dev --region us-central1 --format 'value(status.url)')
  #         echo "Deployed to: $SERVICE_URL"

  #     - name: Notify Slack of Dev Deploy
  #       if: success()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
  #         SLACK_MESSAGE: |
  #           ✅ *Dev Deployment Successful*
  #           Repo: `${{ github.repository }}`
  #           Branch: `${{ github.ref_name }}`
  #           Commit: `${{ github.sha }}`
  #         SLACK_COLOR: good
  #     - name: Notify Slack of Dev Deploy Failure
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
  #         SLACK_MESSAGE: |
  #           ❌ *Dev Deployment Failed*
  #           Repo: `${{ github.repository }}`
  #           Branch: `${{ github.ref_name }}`
  #           Commit: `${{ github.sha }}`
  #         SLACK_COLOR: danger

# # Infra Deploy for Node backend
# #-----------------------------------------------------------------
#   infra-deploy:
#     name: Provision GCP Infra via Pulumi (Dev)
#     needs: ci
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/dev'
#     environment:
#       name: dev

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Pulumi
#         uses: pulumi/actions@v4
#         with:
#           pulumi-version: 3.x

#       - name: Authenticate to Google Cloud
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: '${{ secrets.GCP_DEV_SA_KEY }}'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2

#       - name: Install Node.js for Pulumi (if using Node backend)
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'

#       - name: Install Pulumi dependencies
#         run: npm ci
#         working-directory: ./pulumi

#       - name: Run Pulumi preview
#         run: pulumi preview -s dev
#         working-directory: ./pulumi
#         env:
#           PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

#       - name: Deploy infra with Pulumi
#         run: pulumi up --yes -s dev
#         working-directory: ./pulumi
#         env:
#           PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}


# # Infra Deploy for Python backend
# #-----------------------------------------------------------------
  # infra-deploy:
  #   name: Provision GCP Infra via Pulumi (Dev)
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   environment:
  #     name: dev

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # - name: Enable Compute Engine API
  #     #   run: |
  #     #     gcloud services enable compute.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
        
  #     - name: Set up Pulumi
  #       uses: pulumi/actions@v4
  #       with:
  #         pulumi-version: 3.x

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Set up virtual environment and install Python dependencies
  #       working-directory: ./pulumi
  #       run: |
  #         python -m venv venv
  #         source venv/bin/activate
  #         pip install -r requirements.txt

  #     # NEW: Initialize or select Pulumi stack
  #     - name: Set up Pulumi stack
  #       working-directory: ./pulumi
  #       run: |
  #         source venv/bin/activate
  #         pulumi login
  #         pulumi stack select dev || pulumi stack init dev --non-interactive
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  #     - name: Run Pulumi preview
  #       working-directory: ./pulumi
  #       run: |
  #         source venv/bin/activate
  #         pulumi preview -s dev
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
     
  #     # Add this step BEFORE pulumi up
  #     - name: Set Pulumi config
  #       working-directory: ./pulumi
  #       run: |
  #         source venv/bin/activate
          
  #         # Write service account key to temp file
  #         echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' > service-account-key.json
          
  #         # Set config values
  #         pulumi config set project ${{ secrets.GCP_PROJECT_ID }}
  #         pulumi config set region ${{ secrets.GCP_REGION }}
          
  #         # Set secret from file content
  #         pulumi config set gcpServiceAccountKey --secret < service-account-key.json
          
  #         # Securely remove temp file
  #         shred -u service-account-key.json

  #     - name: Deploy infra with Pulumi
  #       working-directory: ./pulumi
  #       run: |
  #         source venv/bin/activate
  #         pulumi up --yes -s dev
  #       env:
  #         PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  infra-deploy:
    name: Provision GCP Infra via Pulumi (Dev)
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Pulumi
        uses: pulumi/actions@v4
        with:
          pulumi-version: 3.x

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate for API enablement
        run: |
          echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' > sa-key.json
          gcloud auth activate-service-account --key-file=sa-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          rm sa-key.json
          
      - name: Enable required APIs manually
        run: |
          gcloud services enable serviceusage.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
          gcloud services enable cloudresourcemanager.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
          gcloud services enable iam.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
          gcloud services enable compute.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up virtual environment and install Python dependencies
        working-directory: ./pulumi
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Set up Pulumi stack
        working-directory: ./pulumi
        run: |
          source venv/bin/activate
          pulumi login
          pulumi stack select dev || pulumi stack init dev --non-interactive
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Run Pulumi preview
        working-directory: ./pulumi
        run: |
          source venv/bin/activate
          pulumi preview -s dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
       
      - name: Set Pulumi config
        working-directory: ./pulumi
        run: |
          source venv/bin/activate
          pulumi config set project ${{ secrets.GCP_PROJECT_ID }}
          pulumi config set region ${{ secrets.GCP_REGION }}
          echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' > sa-key.json
          pulumi config set gcpServiceAccountKey --secret < sa-key.json
          rm sa-key.json

      - name: Deploy infra with Pulumi
        working-directory: ./pulumi
        run: |
          source venv/bin/activate
          pulumi up --yes -s dev
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          
  dev-deploy:
    name: Deploy to Google Cloud Run (Dev)
    needs: [ci, infra-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          create_credentials_file: true  # Creates ADC file
          export_environment_variables: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate Docker to Artifact Registry
        run: |
          echo '${{ secrets.GCP_PULUMI_DEV_SA_KEY }}' | docker login -u _json_key --password-stdin https://${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:latest \
            -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }} \
            .

      - name: Push Docker images
        run: |
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:latest
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy nodejs-cloudrun-service \
            --image us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/my-nodejs-app-repo/nodejs-app:latest \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --update-env-vars NODE_ENV=dev \
            --timeout 5m \
            --port 8080

      - name: Output Cloud Run URL
        run: |
          SERVICE_URL=$(gcloud run services describe nodejs-cloudrun-service --region us-central1 --format 'value(status.url)')
          echo "Deployed to: $SERVICE_URL"

      - name: Notify Slack of Dev Deploy
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
          SLACK_MESSAGE: |
            ✅ *Dev Deployment Successful*
            Repo: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
          SLACK_COLOR: good

      - name: Notify Slack of Dev Deploy Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
          SLACK_MESSAGE: |
            ❌ *Dev Deployment Failed*
            Repo: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
          SLACK_COLOR: danger
  docker:
    name: Build & Push Docker Image
    needs: production-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Cache Docker layers efficiently using GitHub Actions' built-in cache backend for Docker layers
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/weather-app:latest
            ghcr.io/${{ github.repository_owner }}/weather-app:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
